import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Marina
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    FileT x1;
    Stack undo , redo ,outputStack;
    Subject s1;
    public GUI() {
        initComponents();
        undo = new Stack() ;
        redo =  new Stack() ;
        outputStack = new Stack() ;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        Calculate = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        OPEN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane3.setViewportView(outputArea);

        Calculate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Calculate.setForeground(new java.awt.Color(51, 51, 255));
        Calculate.setText("CALCULATE");
        Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clear.setForeground(new java.awt.Color(51, 51, 255));
        clear.setText("CLEAR");
        clear.setMaximumSize(new java.awt.Dimension(70, 30));
        clear.setMinimumSize(new java.awt.Dimension(70, 30));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        OPEN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        OPEN.setForeground(new java.awt.Color(51, 51, 255));
        OPEN.setText("OPEN");
        OPEN.setPreferredSize(new java.awt.Dimension(70, 30));
        OPEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OPEN, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OPEN, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>                        

    private void CalculateActionPerformed(java.awt.event.ActionEvent evt) {                                          

        redo.clear();
        undo.push("calculate");
        outputArea.setText(null);
        
        
        JFileChooser fc = new JFileChooser();
        fc.showSaveDialog(this);
        File file = fc.getSelectedFile();
        file = new File(file.toString() + ".txt");
        try {
            OutputWritter.WriteFile(s1, file);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }catch(NullPointerException ex){
            outputArea.append(ex.toString());
        }
        outputArea.append("File saved successfully!\n");
        outputArea.setForeground(Color.decode("#5EBA7D"));
    }                                         

    private void clearCommand() {
        //inputStack.push(inputArea.getText());
        outputStack.push(outputArea.getText());
        //inputArea.setText(null);
        outputArea.setText(null);
    }
    
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
        undo.add("clear");
        redo.clear();
        clearCommand();
    }                                     

    private void OPENActionPerformed(java.awt.event.ActionEvent evt) {                                     
        redo.clear();
        undo.push("open");
        outputArea.setText(null);
        OPEN.setText("OPEN FILE");
        try {
            x1 = new FileT();
            String filename = x1.opener();
            x1.reader();
            outputArea.append("file: " + filename + " opened successfully!\n");
            outputArea.setForeground(Color.decode("#5EBA7D"));
            x1.create_output_file(filename);
            File file = new File(filename);

            s1 = FileAnalyzer.ReadFile(file);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ne) {
            outputArea.append("no file selected");
        }catch(StudentNumberException ex){
            outputArea.append("Check Student ID");
        }catch(StudentNameException ex){
            outputArea.append("Check Student Name (Can't provide empty Student Name and Empty record is not allowed and Name of Student must contain Alphabetic only)");
        }
        catch(SubjectNameException ex){
            outputArea.append("Check Subject Name (Empty record is not allowed and Name of subject must contain Alphabetic only and Can't provide empty Subject Name)");
        } catch(SubjectCodeException ex){
            outputArea.append("Check Subject Code");
        }catch(SpaceException ex){
            outputArea.append("Check Space (Can't contain space in the first)");
        } catch(FullMarkException ex){
            outputArea.append("Check Full Mark (Can't provide empty Subject Mark and FullMark must be Integer and Full mark must be 100 )");
        }catch(StudentMarkException ex){
            outputArea.append("Check Student Mark (Activities or oral/Practical must be Integer and Activities or oral/Practical must be in range (0-10) and Midterm must be in range (0-20)"
                    + " and Can't provide empty Student Mark Line and Final Exam: must be integer )");
        }
        catch (IllegalArgumentException ex){
           outputArea.append("Empty file is not allowed or Invalid File extension or Invalid File: Line 1 error and Full mark must be 100");
        }catch (IOException ex) {
            outputArea.append(ex.toString());
        } 
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Calculate;
    private javax.swing.JButton OPEN;
    private javax.swing.JButton clear;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea outputArea;
    // End of variables declaration                   
}
